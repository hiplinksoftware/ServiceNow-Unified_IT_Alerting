<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_hls_hiplink.hiplink_data_operations</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>hiplink_data_operations</name>
        <script><![CDATA[var hiplink_data_operations = Class.create();
hiplink_data_operations.prototype = {
    initialize: function () {
    },

    getAllAssignedUsers: function (carrierType) {

        var assignedUsers = [];

        var grUserRole = new GlideRecord('sys_user_role');
        if (typeof carrierType === 'undefined' || carrierType === null) {
            grUserRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.user');
        }
        else {
            grUserRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.user.' + carrierType);
        }
        grUserRole.query();

        var userRoleIDs = [];
        var userRoleNamesMap = {};

        while (grUserRole.next()) {

            var userRoleID = grUserRole.sys_id.toString();
            userRoleIDs.push(userRoleID);
            userRoleNamesMap[userRoleID] = grUserRole.name.toString();
        }

        var grUserHasRole = new GlideRecord('sys_user_has_role');
        grUserHasRole.addQuery('role', 'IN', userRoleIDs.join(','));
        grUserHasRole.query();

        while (grUserHasRole.next()) {

            var userID = grUserHasRole.user.toString();
            var userRoleName = userRoleNamesMap[grUserHasRole.role.toString()];

            if (typeof assignedUsers[userID] === 'undefined') {
                assignedUsers[userID] = [];
            }
            assignedUsers[userID].push(userRoleName);
        }

        return assignedUsers;
    },

    getAllAssignedGroups: function (carrierType) {

        var assignedGroups = [];

        var grGroupRole = new GlideRecord('sys_user_role');
        if (typeof carrierType === 'undefined' || carrierType === null) {
            grGroupRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.group');
        }
        else {
            grUserRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.user.' + carrierType);
        }
        grGroupRole.query();

        var groupRoleIDs = [];
        var groupRoleNamesMap = {};

        while (grGroupRole.next()) {

            var groupRoleID = grGroupRole.sys_id.toString();
            groupRoleIDs.push(groupRoleID);
            groupRoleNamesMap[groupRoleID] = grGroupRole.name.toString();
        }

        var grGroupHasRole = new GlideRecord('sys_group_has_role');
        grGroupHasRole.addQuery('role', 'IN', groupRoleIDs.join(','));
        grGroupHasRole.query();

        while (grGroupHasRole.next()) {

            var groupID = grUserHasRole.group.toString();
            var groupRoleName = groupRoleNamesMap[grGroupHasRole.role.toString()];

            if (typeof assignedGroups[groupID] === 'undefined') {
                assignedGroups[groupID] = [];
            }
            assignedGroups[groupID].push(groupRoleName);
        }

        return assignedGroups;
    },

    getAssignedUserRoleNames: function (userID) {

        var assignedUserRoleNames = [];

        var grUserRole = new GlideRecord('sys_user_role');
        grUserRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.user');
        grUserRole.query();

        var userRoleIDs = [];
        var userRoleNamesMap = {};

        while (grUserRole.next()) {

            var userRoleID = grUserRole.sys_id.toString();
            userRoleIDs.push(userRoleID);
            userRoleNamesMap[userRoleID] = grUserRole.name.toString();
        }

        var grUserHasRole = new GlideRecord('sys_user_has_role');
        grUserHasRole.addQuery('user', userID);
        grUserHasRole.addQuery('role', 'IN', userRoleIDs.join(','));
        grUserHasRole.query();

        while (grUserHasRole.next()) {

            var userRoleName = userRoleNamesMap[grUserHasRole.role.toString()];
            assignedUserRoleNames.push(userRoleName);
        }

        return assignedUserRoleNames;
    },

    getAssignedGroupRoleNames: function (groupID) {

        var assignedGroupRoleNames = [];

        var grGroupRole = new GlideRecord('sys_user_role');
        grGroupRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.group');
        grGroupRole.query();

        var groupRoleIDs = [];
        var groupRoleNamesMap = {};

        while (grGroupRole.next()) {

            var groupRoleID = grGroupRole.sys_id.toString();
            groupRoleIDs.push(groupRoleID);
            groupRoleNamesMap[groupRoleID] = grGroupRole.name.toString();
        }

        var grGroupHasRole = new GlideRecord('sys_group_has_role');
        grGroupHasRole.addQuery('group', groupID);
        grGroupHasRole.addQuery('role', 'IN', groupRoleIDs.join(','));
        grGroupHasRole.query();

        while (grGroupHasRole.next()) {

            var groupRoleName = groupRoleNamesMap[grGroupHasRole.role.toString()];
            assignedGroupRoleNames.push(groupRoleName);
        }

        return assignedGroupRoleNames;
    },

    getAssignedGroupMemberIDs: function (groupID) {

        var assignedGroupMemberIDs = [];

        var grGroupMember = new GlideRecord('sys_user_grmember');
        grGroupMember.addQuery('group', groupID);
        grGroupMember.query();

        while (grGroupMember.next()) {
            assignedGroupMemberIDs.push(grGroupMember.user.toString());
        }

        return assignedGroupMemberIDs;
    },

    getAssignedUserGroupIDs: function (userID) {

        var assignedUserGroupIDs = [];

        var grGroupMember = new GlideRecord('sys_user_grmember');
        grGroupMember.addQuery('user', userID);
        grGroupMember.query();

        while (grGroupMember.next()) {
            assignedUserGroupIDs.push(grGroupMember.group.toString());
        }

        return assignedUserGroupIDs;
    },

    getUserDisplayNameByID: function (userID) {

        var userDisplayName = '';

        var grUser = new GlideRecord('sys_user');
        grUser.addQuery('sys_id', userID);
        grUser.query();

        if (grUser.next()) {

            userDisplayName = grUser.name;

            if (userDisplayName !== '') {
                userDisplayName += ' (' + grUser.user_name + ')';
            }
            else {
                userDisplayName = grUser.user_name;
            }
        }

        return userDisplayName;
    },

    getUserIDByName: function (userName) {

        var userID = '';

        var grUser = new GlideRecord('sys_user');
        grUser.addQuery('user_name', userName);
        grUser.query();

        if (grUser.next()) {
            userID = grUser.sys_id.toString();
        }

        return userID;
    },

    getGroupNameByID: function (groupID) {

        var groupName = '';

        var grGroup = new GlideRecord('sys_user_group');
        grGroup.addQuery('sys_id', groupID);
        grGroup.query();

        if (grGroup.next()) {
            groupName = grGroup.name;
        }

        return groupName;
    },

    getGroupIDByName: function (groupName) {

        var groupID = '';

        var grGroup = new GlideRecord('sys_user_group');
        grGroup.addQuery('name', groupName);
        grGroup.addQuery('active', true);
        grGroup.query();

        if (grGroup.next()) {
            groupID = grGroup.sys_id.toString();
        }

        return groupID;
    },

    getUserRoleName: function (userRoleID) {

        var userRoleName = '';

        var grUserRole = new GlideRecord('sys_user_role');
        grUserRole.addQuery('sys_id', userRoleID);
        grUserRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.user');
        grUserRole.query();

        if (grUserRole.next()) {
            userRoleName = grUserRole.name.toString();
        }

        return userRoleName;
    },

    getUser: function (userID) {

        var user = null;

        var grUser = new GlideRecord('sys_user');
        grUser.addQuery('sys_id', userID);
        grUser.addQuery('active', true);
        grUser.query();

        if (grUser.next()) {
            user = grUser;
        }

        return user;
    },

    getGroupRoleName: function (groupRoleID) {

        var groupRoleName = '';

        var grGroupRole = new GlideRecord('sys_user_role');
        grGroupRole.addQuery('sys_id', groupRoleID);
        grGroupRole.addQuery('name', 'STARTSWITH', 'x_hls_hiplink.contact.group');
        grGroupRole.query();

        if (grGroupRole.next()) {
            groupRoleName = grGroupRole.name.toString();
        }

        return groupRoleName;
    },

    getGroup: function (groupID) {

        var group = null;

        var grGroup = new GlideRecord('sys_user_group');
        grGroup.addQuery('sys_id', groupID);
        grGroup.addQuery('active', true);
        grGroup.query();

        if (grGroup.next()) {
            group = grGroup;
        }

        return group;
    },

    getIncident: function (incidentID, incidentNumber) {

        var incident = null;

        var grIncident = new GlideRecord('incident');
        grIncident.addQuery('sys_id', incidentID);
        grIncident.addQuery('number', incidentNumber);
        grIncident.query();

        if (grIncident.next()) {
            incident = grIncident;
        }

        return incident;
    },

    updateIncident: function (incident, updateSysFields, enableBusinessRules) {

        incident.autoSysFields(updateSysFields);
        incident.setWorkflow(enableBusinessRules);
        incident.update();
    },

    type: 'hiplink_data_operations'
};

hiplink_data_operations.getInstance = function () {

    if (typeof hiplink_data_operations._instance === 'undefined') {
        hiplink_data_operations._instance = new hiplink_data_operations();
    }

    return hiplink_data_operations._instance;
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-10-05 11:22:12</sys_created_on>
        <sys_id>bcd1383d2f500010ae13ddda2799b63a</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>hiplink_data_operations</sys_name>
        <sys_package display_value="HipLink Unified IT Alerting" source="x_hls_hiplink">5385a1ff1b10330079ee2136ec4bcb24</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="HipLink Unified IT Alerting">5385a1ff1b10330079ee2136ec4bcb24</sys_scope>
        <sys_update_name>sys_script_include_bcd1383d2f500010ae13ddda2799b63a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-11-22 21:10:00</sys_updated_on>
    </sys_script_include>
</record_update>
